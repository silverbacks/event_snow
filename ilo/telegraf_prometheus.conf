# Telegraf Configuration for iLO Hardware Monitoring -> Prometheus
# Optimized for local hardware monitoring with InfluxDB line protocol format

# Global configuration
[global_tags]
  datacenter = "your_datacenter"
  environment = "production"

[agent]
  interval = "60s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  hostname = ""
  omit_hostname = false

# INPUT PLUGINS

# Local iLO Hardware Monitor
[[inputs.exec]]
  commands = [
    "python3 /opt/ilo-monitor/ilo_monitor.py --local"
  ]
  timeout = "60s"
  data_format = "influx"
  
  [inputs.exec.tags]
    source = "ilo_monitor_local"
    monitor_type = "hardware"
    collection_mode = "local_console"

# System metrics for context
[[inputs.system]]
  fielddrop = ["uptime_format"]

[[inputs.cpu]]
  percpu = false
  totalcpu = true
  collect_cpu_time = false
  report_active = false

[[inputs.mem]]

[[inputs.disk]]
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

# PROCESSOR PLUGINS

# Convert string status to numeric for Prometheus
[[processors.converter]]
  [processors.converter.fields]
    integer = ["*_numeric", "*_rpm", "*_percent", "*_mb", "*_gb", "*_watts", "*_mhz"]
    float = ["temperature_*", "*_celsius", "load_*", "usage_percent"]

# Map status strings to Prometheus-friendly labels and numeric values
[[processors.starlark]]
  source = '''
def apply(metric):
    # Status mapping for Prometheus numeric metrics
    status_map = {
        "OK": 1, "Good": 1, "Enabled": 1, "On": 1, "Normal": 1,
        "Warning": 2, "Degraded": 2, "Caution": 2,
        "Critical": 3, "Error": 3, "Failed": 3, "Off": 3, "Fault": 3,
        "Unknown": 0, "Absent": 0
    }
    
    # Convert status fields to both numeric values and labels
    for field_name in list(metric.fields.keys()):
        if field_name in ["status", "health", "state"]:
            status_value = str(metric.fields[field_name])
            numeric_value = status_map.get(status_value, 0)
            metric.fields[field_name + "_code"] = numeric_value
            metric.tags[field_name] = status_value
            del metric.fields[field_name]
    
    # Add health indicators for key metrics
    measurement = metric.name
    if "temperature" in measurement:
        temp_value = metric.fields.get("value", 0)
        if temp_value > 85:
            metric.fields["health_score"] = 0  # Critical
        elif temp_value > 75:
            metric.fields["health_score"] = 0.5  # Warning
        elif temp_value > 0:
            metric.fields["health_score"] = 1  # Good
        else:
            metric.fields["health_score"] = 0  # Unknown
            
    elif "fan" in measurement:
        rpm = metric.fields.get("speed_rpm", 0)
        if rpm == 0:
            metric.fields["health_score"] = 0  # Critical
        elif rpm < 500:
            metric.fields["health_score"] = 0.5  # Warning
        else:
            metric.fields["health_score"] = 1  # Good
    
    return metric
'''

# OUTPUT PLUGINS

# Prometheus Client - Primary Output
[[outputs.prometheus_client]]
  # Prometheus scrape endpoint
  listen = ":9273"
  path = "/metrics"
  
  # Prometheus settings
  metric_version = 2
  export_timestamp = true
  string_as_label = true
  
  # Exclude default Go metrics to reduce noise
  collectors_exclude = ["gocollector", "process"]
  
  # Only export our hardware metrics
  [outputs.prometheus_client.tagpass]
    source = ["ilo_monitor*", "system", "cpu", "mem", "disk"]

# File output for InfluxDB line protocol validation
[[outputs.file]]
  files = ["/var/log/telegraf/ilo_prometheus_debug.log"]
  rotation_interval = "24h"
  rotation_max_size = "50MB"
  rotation_max_archives = 2
  data_format = "influx"

# Console output for testing (disable in production)
# [[outputs.file]]
#   files = ["stdout"]
#   data_format = "influx"